[tool.poetry]
name = "crm-system"
version = "0.1.0"
description = "Pipeline de dados completo para um CRM de vendas, utilizando ferramentas como Python, SQL, dbt, OpenAI e Langchain."
authors = ["Julio Okuda <julio.okuda@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
streamlit = "^1.38.0"
pydantic = {extras = ["email"], version = "^2.9.2"}
sqlalchemy = "^2.0.35"
psycopg2-binary = "^2.9.9"
python-dotenv = "^1.0.1"
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.35"
mkdocstrings = "^0.26.1"
mkdocstrings-python = "^1.11.1"
briefer = "^0.0.13"
plotly-express = "^0.4.1"
fastapi = "^0.115.0"
uvicorn = "^0.31.0"
langchain = "^0.3.2"
langchain-community = "^0.3.1"
langchain-google-genai = "^2.0.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"
isort = "^5.13.2"
black = "^24.8.0"
flake8 = "^7.1.1"
taskipy = "^1.13.0"
pytest = "^8.3.3"
faker = "^29.0.0"
dbt-core = "^1.8.7"
dbt-postgres = "^1.8.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Adicionando a configuração ao pyproject.toml para evitar conflitos
[tool.isort]
profile = "black"

# Ignorar a verificação da pasta .env
[tool.flake8]
exclude = ".venv"

# lib para automatizar tarefas
[tool.taskipy.tasks]
format = "isort .&&black .&&flake8" #verifica a formatação do código na sequência.
kill = "kill -9 $(lsof -t -i :5000)"
